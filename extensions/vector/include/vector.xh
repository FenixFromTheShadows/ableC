#include <string.xh>
#include <gc.h>

#include <string.h>
#include <stdbool.h>
//#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <limits.h>

#ifndef _VECTOR_XH
#define _VECTOR_XH

struct _vector_info {
  size_t length;
  size_t capacity;
  size_t elem_size;
};

// Check whether an index is valid for given vector info
static void _check_index_vector(struct _vector_info info, void *contents, size_t i) {
  if (i >= info.length || i < 0) {
    fprintf(stderr, "Vector index out of bounds: length %lud, index %lud\n", info.length, i);
    exit(1);
  }
  if (contents == NULL) {
    fprintf(stderr, "Cannot access uninitialized vector\n");
    exit(1);
  }
}

// Increase the length of a vector to new_size, updating the given info and contents pointers
static void _resize_vector(struct _vector_info *info, void **contents, size_t new_length) {
  info->length = new_length;
  if (new_length > info->capacity) {
    info->capacity = new_length * 2;
    *contents = GC_realloc(*contents, info->elem_size * info->capacity);
  }
}

// If the index is equal to the vector size, expand the vector by one
static void _maybe_grow_vector_by_one(struct _vector_info *info, void **contents, size_t i) {
  if (i > info->length || i < 0) {
    fprintf(stderr, "Vector index out of bounds: length %lud, index %lud\n", info->length, i);
    exit(1);
  }
  if (i == info->length) {
    _resize_vector(info, contents, info->length + 1);
  }
}

// Initialize a vector to have a given size
static void _init_vector(struct _vector_info *info, void **contents, size_t elem_size, size_t length) {
  *info = (struct _vector_info){length, length * 2, elem_size};
  *contents = GC_malloc(elem_size * info->capacity);
}

#endif

#include <string.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <gc.h>

#ifndef _STRING_XH
#define _STRING_XH

// These functions are in theory OK to call directly
static inline string showString(string s) {
  const char *input = (const char*)s;
  char *result = GC_malloc(2 * strlen(s) + 3); // Worst-case size, if all chars are escaped
  result[0] = '\"';
  size_t resultIndex = 1;
  for (size_t i = 0; i < s.length; i++) {
    char *tmp;
    switch (input[i]) {
    case '\a':
      result[resultIndex++] = '\\';
      result[resultIndex++] = 'a';
      break;
    case '\b':
      result[resultIndex++] = '\\';
      result[resultIndex++] = 'b';
      break;
    case '\n':
      result[resultIndex++] = '\\';
      result[resultIndex++] = 'n';
      break;
    case '\r':
      result[resultIndex++] = '\\';
      result[resultIndex++] = 'r';
      break;
    case '\t':
      result[resultIndex++] = '\\';
      result[resultIndex++] = 't';
      break;
    case '\v':
      result[resultIndex++] = '\\';
      result[resultIndex++] = 'v';
      break;
    case '\"':
    case '\'':
    case '\\':
    case '\?':
      result[resultIndex++] = '\\';
      result[resultIndex++] = input[i];
      break;
    default:
      result[resultIndex++] = input[i];
    }
  }
  result[resultIndex++] = '\"';
  result[resultIndex++] = '\0';
  
  return (string)result;
}

static inline string showInt(int i) {
  string result = GC_malloc((CHAR_BIT * sizeof(i) - 1) / 3 + 2);
  sprintf((char*)result, "%d", i);
  return result;
}

static inline string showFloat(double f) {
  string result = GC_malloc((CHAR_BIT * sizeof(f) - 1) / 3 + 2);
  sprintf((char*)result, "%f", f);
  return result;
}

static inline string showChar(char c) {
  string result = GC_malloc(4);
  sprintf((char*)result, "'%c'", c);
  return result;
}

static inline string strChar(char c) {
  char *result = GC_malloc(2);
  result[0] = c;
  result[1] = '\0';
  return (string)result;
}

static inline string strPointer(void *ptr) {
  char *result = GC_malloc(9);
  sprintf(result, "%lx", (unsigned long)ptr);
  return (string)result;
}

// Helper functions should really only be used through the extension
static inline string _showPointer(const char *baseTypeName, void *ptr) {
  char *result = GC_malloc(strlen(baseTypeName) + 17);
  sprintf(result, "<%s at 0x%lx>", baseTypeName, (unsigned long)ptr);
  return (string)result;
}

static inline void _check_index_string(string s, size_t i) {
  size_t len = s.length;
  if (i < 0 || i >= len) {
    fprintf(stderr, "String index out of bounds: length %lu, index %lu", len, i);
    exit(1);
  }
}

static inline char _index_string(string s, size_t i) {
  _check_index_string(s, i);
  return ((char*)s)[i];
}

static inline bool _eq_string(string s1, string s2) {
  return !strcmp(s1, s2);
}

static inline string _append_string(string s1, string s2) {
  string result = GC_malloc(strlen(s1) + strlen(s2) + 1);
  strcpy((char*)result, s1);
  strcat((char*)result, s2);
  return result;
}

static inline string _repeat_string(string s, size_t num) {
  char *result = GC_malloc(strlen(s) * num + 1);
  result[0] = '\0';
  size_t i;
  for (size_t i = 0; i < num; i++)
    strcat(result, s);
  return (string)result;
}

static inline string _remove_string(string s1, string s2) {
  size_t i, j;
  size_t len1 = strlen(s1);
  size_t len2 = strlen(s2);
  char *result = GC_malloc(strlen(s1) + 1);
  for (i = 0, j = 0; i < len1; i++) {
    if (i > len1 - len2 || strncmp((const char*)s1 + i, s2, len2)) {
      result[j] = s1[i];
      j++;
    }
    else {
      i += len2 - 1;
    }
  }
  result[j] += '\0';
  
  return (string)result;
}

static inline string _substring(string s, size_t start, size_t end) {
  size_t len = s.length;
  if (start < 0 || start >= len || end < 0 || end >= len || start > end) {
    fprintf(stderr, "Substring index out of bounds: length %lu, start %lu, end %lu", len, start, end);
    exit(1);
  }
  char *result = GC_malloc(end - start + 1);
  strncpy(result, (const char*)s + start, end - start);
  return (string)result;
}

#endif
